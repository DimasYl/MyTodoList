{"version":3,"sources":["serviceWorker.ts","state/tasks-reducer.ts","AddItemForm.tsx","EditableSpan.tsx","api/tasks-api.ts","app/app-reducer.ts","Task.tsx","TodoList.tsx","api/todolist-api.ts","state/todolists-reducer.ts","ErrorSnackbar/ErrorSnackbar.tsx","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addTask","trimmedTitle","trim","addItem","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","onBlur","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","taskApi","todolistId","get","post","taskId","delete","model","put","initialState","status","setAppStatusAC","type","setAppErrorAC","Task","onChangeHandler","useCallback","newIsDoneValue","checked","changeTaskStatus","task","id","Completed","New","onChangeTitleHandler","newValue","changeTaskTitle","className","Checkbox","removeTask","Delete","TodoList","dispatch","useDispatch","useEffect","then","res","tasks","data","items","setTasksAC","all","changeFilter","active","completed","changeTodolistTitle","newTitle","taskForTodolist","filter","t","removeTodolist","disabled","entityStatus","map","Button","todolistApi","v1","Alert","elevation","ErrorSnackbar","useSelector","state","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","AppWithRedux","todolists","resultCode","removeTodolistAC","messages","length","addTodolist","todolist","item","addTodolistTC","changeTodolistTitleAC","taskID","todolistID","removeTaskTC","newFilterValue","taskTitle","addTaskAC","changeStatus","getState","updateTask","find","tl","deadline","description","priority","startDate","newTask","changeTaskStatusAC","todoListId","updateTaskStatusTC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","Grid","container","style","padding","spacing","Paper","rootReducers","combineReducers","action","todolist1","todolist2","stateCopy","forEach","todolistTask","newTaskArray","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6a7cc6e2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistActionType} from \"./todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {taskApi, UpdateTaskModelType} from \"../api/tasks-api\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../app/app-reducer\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    id: string\r\n    todolistId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    task: TaskType\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    status: TaskStatuses\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    id: string\r\n    title: string\r\n    todolistId: string\r\n}\r\ntype ActionType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType | ChangeTaskTitleActionType\r\n    | AddTodolistActionType | RemoveTodolistActionType\r\n    | SetTodolistActionType | SetTaskActionType\r\n    | SetAppStatusActionType | SetAppErrorActionType\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"SET-TASKS\": {\r\n            let stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            let stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case \"REMOVE-TASK\": {\r\n            let stateCopy = {...state}\r\n            let tasks = stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId] = tasks.filter(t => t.id !== action.id)\r\n            return stateCopy;\r\n        }\r\n        case \"ADD-TASK\": {\r\n            let stateCopy = {...state}\r\n            // let tasks = stateCopy[action.todolistId]\r\n            // let newTask = {id: v1(), title: action.title, status: TaskStatuses.New,\r\n            //         todoListId: action.todolistId, description: '',\r\n            //         startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low}\r\n            // stateCopy[action.todolistId] = [newTask, ...tasks]\r\n            const tasks = stateCopy[action.task.todoListId]\r\n            const newTask = [action.task, ...tasks]\r\n            stateCopy[action.task.todoListId] = newTask\r\n            return stateCopy\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            let todolistTask = state[action.todolistId]\r\n            let newTaskArray = todolistTask.map(t => t.id === action.taskId\r\n                ? {...t, status: action.status}\r\n                : t)\r\n            state[action.todolistId] = newTaskArray\r\n            return {...state}\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            let todolistTask = state[action.todolistId]\r\n            let newTaskArray = todolistTask.map(t => t.id === action.id\r\n                ? {...t, title: action.title}\r\n                : t)\r\n            state[action.todolistId] = newTaskArray\r\n            return {...state}\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {...state, [action.todolist.id]: []}\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            let stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const removeTaskAC = (id: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', id, todolistId}\r\n}\r\n\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: \"ADD-TASK\", task}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (id: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: \"CHANGE-TASK-TITLE\", id, title, todolistId}\r\n}\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {type: 'SET-TASKS', tasks, todolistId} as const\r\n}\r\n\r\nexport type SetTaskActionType = ReturnType<typeof setTasksAC>\r\n\r\n\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskApi.getTask(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            // @ts-ignore\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (taskID: string, todolistID: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskApi.deleteTask(todolistID, taskID)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskID, todolistID))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskApi.createTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                let task = res.data.data.item\r\n                // @ts-ignore\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n\r\n        })\r\n}\r\n\r\nexport const updateTaskStatusTC = (taskId: string, status: TaskStatuses, todolistId: string) => (dispatch: Dispatch<ActionType>, getState: () => AppRootStateType) => {\r\n    const state = getState()\r\n\r\n    const allTasks = state.tasks\r\n    const tasksForCurrentTodo = allTasks[todolistId]\r\n\r\n    let updateTask = tasksForCurrentTodo.find(tl => {\r\n        return tl.id === taskId\r\n    })\r\n\r\n    if (updateTask) {\r\n\r\n        const model: UpdateTaskModelType = {\r\n            title: updateTask.title,\r\n            status: status,\r\n            deadline: updateTask.deadline,\r\n            description: updateTask.description,\r\n            priority: updateTask.priority,\r\n            startDate: updateTask.startDate\r\n        }\r\n\r\n        //есть проще запись рабочая\r\n        // const model = {...updateTask, status}\r\n        dispatch(setAppStatusAC('loading'))\r\n        taskApi.updateTask(todolistId, taskId, model)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    const newTask = res.data.data.item\r\n                    dispatch(changeTaskStatusAC(newTask.id, newTask.status, newTask.todoListId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    if (res.data.messages.length) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    } else {\r\n                        dispatch(setAppErrorAC('Some error'))\r\n                    }\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n            })\r\n    }\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (taskTitle: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    console.log('AddItemForm called')\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError('Titles is required')\r\n        }\r\n        setTitle('')\r\n    }\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !==null){\r\n            setError(null)\r\n        }\r\n        if (e.key === 'Enter') addTask()\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    return <div>\r\n        <TextField variant={\"outlined\"}\r\n                   value={title}\r\n                   onChange={changeTitle}\r\n                   onKeyPress={onKeyPressAddTask}\r\n                   error={!!error}\r\n                   label={'Title'}\r\n                   helperText={error}\r\n                   onBlur={() => {\r\n                       setError(null)\r\n                   }}\r\n        />\r\n        <IconButton color={\"primary\"} onClick={addTask}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan called')\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState('')\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode ?\r\n        <TextField variant={\"outlined\"} value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n\r\n})","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9796e0df-7156-4180-913f-3e6c30a4c76a'\r\n    }\r\n})\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype TaskType = {\r\n    addedDate: string\r\n    deadline: number\r\n    description: number\r\n    id: string\r\n    order: number\r\n    priority: number\r\n    startDate: string\r\n    status: number\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype TasksType = {\r\n    error: number\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n}\r\n\r\ntype ResponseType<T = {}> = {\r\n    fieldsErrors: []\r\n    messages: string[]\r\n    resultCode: number\r\n    data: T\r\n}\r\n\r\n\r\n\r\nexport const taskApi = {\r\n    getTask(todolistId: string) {\r\n       return instance.get<TasksType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string,title: string) {\r\n        return instance.post<ResponseType<{item:TasksType}>>(`/todo-lists/${todolistId}/tasks`,{title})\r\n    },\r\n    deleteTask(todolistId: string,taskId: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n\r\n}","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case \"APP/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\n\r\ntype ActionsType = SetAppStatusActionType | SetAppErrorActionType","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./TodoList\";\r\nimport {TaskStatuses} from \"./state/tasks-reducer\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todolistID: string) => void\r\n    task: TaskType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    console.log('Task')\r\n\r\n    const removeTask = () => {\r\n        props.removeTask(props.task.id, props.todolistId)\r\n    }\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    },[props.changeTaskTitle, props.task.id, props.todolistId])\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n            <Checkbox\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandler}\r\n            />\r\n\r\n            <EditableSpan title={props.task.title} onChange={onChangeTitleHandler}/>\r\n            <IconButton onClick={removeTask}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Task} from \"./Task\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC, TaskPriorities, TaskStatuses} from \"./state/tasks-reducer\";\r\nimport {FilterValueType} from \"./AppWithRedux\";\r\nimport {RequestStatusType} from \"./app/app-reducer\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    entityStatus: RequestStatusType\r\n    tasks: Array<TaskType>\r\n    addTask: (taskTitle: string, todolistID: string) => void\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeFilter: (newFilterValue: FilterValueType, todolistID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todolistID: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValueType\r\n    removeTodolist: (todolistID: string) => void\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport const TodoList = React.memo((props: TodoListPropsType) => {\r\n    console.log('TodoList called')\r\n    const dispatch = useDispatch()\r\n    useEffect(()=>{\r\n        dispatch(fetchTasksTC(props.id))\r\n    },[])\r\n\r\n    const all = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id])\r\n    const active = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id])\r\n    const completed = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id])\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n    const changeTodolistTitle = useCallback((newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle)\r\n    }, [props.changeTodolistTitle, props.id])\r\n\r\n    function removeTodolist() {\r\n        props.removeTodolist(props.id)\r\n    }\r\n\r\n    let taskForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        taskForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        taskForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul>\r\n                {taskForTodolist.map(t => <Task key={t.id}\r\n                                                task={t}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                todolistId={props.id}\r\n\r\n                />)}\r\n            </ul>\r\n            <div>\r\n                <Button color={\"default\"} variant={props.filter === 'all' ? \"contained\" : \"text\"}\r\n                        onClick={all}>All</Button>\r\n                <Button color={\"primary\"} variant={props.filter === 'active' ? \"contained\" : \"text\"}\r\n                        onClick={active}>Active</Button>\r\n                <Button color={\"secondary\"} variant={props.filter === 'completed' ? \"contained\" : \"text\"}\r\n                        onClick={completed}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9796e0df-7156-4180-913f-3e6c30a4c76a'\r\n    }\r\n})\r\n\r\nexport type TodoType = {\r\n    id:string\r\n    addedDate: string\r\n    order: number\r\n    title:string\r\n}\r\n\r\ntype ResponseType<T = {}> = {\r\n    resultCode: number\r\n    fieldsErrors: []\r\n    messages: string[],\r\n    data: T\r\n}\r\n\r\nexport const todolistApi = {\r\n    getTodo() {\r\n       return instance.get<Array<TodoType>>('/todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<ResponseType<{ item: TodoType }>>('/todo-lists',{title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}`)\r\n    },\r\n    updateTodo(todolistId: string,title: string) {\r\n        return  instance.put<ResponseType>(`/todo-lists/${todolistId}`,{title})\r\n    }\r\n\r\n}","import {v1} from \"uuid\";\r\nimport {todolistApi, TodoType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    RequestStatusType,\r\n    setAppErrorAC,\r\n    SetAppErrorActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType\r\n} from \"../app/app-reducer\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\n\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    todolist: TodolistType\r\n}\r\n\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValueType\r\n}\r\n\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\ntype ActionType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodolistActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ChangeTodolistEntityStatusActionType\r\n\r\nexport let todolistID1 = v1()\r\nexport let todolistID2 = v1()\r\n\r\nexport type FilterValueType = 'all' | 'active' | 'completed'\r\n\r\nconst initialState: TodolistDomainType[] = []\r\nexport type TodolistDomainType = TodoType & { filter: FilterValueType, entityStatus: RequestStatusType }\r\n\r\nexport const todolistsReducer = (state: TodolistDomainType[] = initialState, action: ActionType): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl )\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case \"ADD-TODOLIST\":\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            let todolist1 = state.find(tl => tl.id === action.id)\r\n            if (todolist1) {\r\n                todolist1.title = action.title\r\n            }\r\n            return [...state]\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            let todolist2 = state.find(tl => tl.id === action.id)\r\n            if (todolist2) {\r\n                todolist2.filter = action.filter\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const removeTodolistAC = (id: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id}\r\n}\r\n\r\nexport const addTodolistAC = (todolist: TodolistType): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', todolist}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id, title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValueType): ChangeTodolistFilterActionType => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", id, filter}\r\n}\r\n\r\nexport const setTodolistAC = (todolists: Array<TodoType>) => ({type: \"SET-TODOLISTS\", todolists} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    entityStatus\r\n} as const)\r\n\r\nexport type SetTodolistActionType = ReturnType<typeof setTodolistAC>\r\nexport type ChangeTodolistEntityStatusActionType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport const fetchTodolistTC = () => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistApi.getTodo()\r\n        .then((res) => {\r\n            dispatch(setTodolistAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistApi.createTodo(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n}\r\n\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistApi.deleteTodo(todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n}\r\n\r\nexport const updateTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistApi.updateTodo(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC(todolistId, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {setAppErrorAC} from \"../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n               ERROR!\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {TaskType, TodoList} from \"./TodoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    Container,\r\n    Grid,\r\n    IconButton,\r\n    LinearProgress,\r\n    Paper,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    fetchTodolistTC,\r\n    removeTodolistTC, TodolistDomainType,\r\n    updateTodolistTitleTC\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskTC, changeTaskTitleAC, removeTaskTC, TaskStatuses, updateTaskStatusTC} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {RequestStatusType} from \"./app/app-reducer\";\r\nimport {ErrorSnackbar} from \"./ErrorSnackbar/ErrorSnackbar\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\n\r\nexport type FilterValueType = 'all' | 'active' | 'completed'\r\n\r\n\r\nconst AppWithRedux = React.memo(() => {\r\n\r\n    useEffect(()=>{\r\n        dispatch(fetchTodolistTC())\r\n    },[])\r\n\r\n    console.log('AppWithRedux called')\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        dispatch(removeTodolistTC(id))\r\n    },[])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    },[])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, newTitle: string) => {\r\n        dispatch(updateTodolistTitleTC(id, newTitle))\r\n    },[])\r\n\r\n    const removeTask = useCallback((taskID: string, todolistID: string) => {\r\n            dispatch(removeTaskTC(taskID, todolistID))\r\n    },[])\r\n\r\n    const changeFilter = useCallback((newFilterValue: FilterValueType, todolistID: string) => {\r\n        dispatch(changeTodolistFilterAC(todolistID, newFilterValue))\r\n    },[])\r\n\r\n    const addTask = useCallback((taskTitle: string, todolistID: string) => {\r\n        dispatch(addTaskTC(todolistID, taskTitle))\r\n    },[])\r\n\r\n    const changeStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskStatusTC(taskId, status, todolistId))\r\n\r\n\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback((taskID: string, newTitle: string, todolistID: string) => {\r\n        dispatch(changeTaskTitleAC(taskID, newTitle, todolistID))\r\n    },[])\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar>\r\n                    <IconButton edge='start' color={\"inherit\"} aria-label={'menu'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        News\r\n                    </Typography>\r\n                    <Button color={'inherit'}>Login</Button>\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color=\"secondary\" />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <p>todolists</p>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map((tl) => {\r\n                            let taskForTodolist = tasks[tl.id]\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <TodoList\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        entityStatus={tl.entityStatus}\r\n                                        title={tl.title}\r\n                                        tasks={taskForTodolist}\r\n                                        addTask={addTask}\r\n                                        removeTask={removeTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        changeFilter={changeFilter}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default AppWithRedux;\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"../app/app-reducer\";\r\n\r\nconst rootReducers = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <AppWithRedux />\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}